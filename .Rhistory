# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
shiny::runApp()
runApp()
runApp()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
runApp()
shiny::runApp()
source("C:/Users/bach/Dropbox/Shiny/Cheema-Lab/omicsTools/dev/run_dev.R")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
readr::read_csv("Internal Standard Normalized Data.csv")
data <- readr::read_csv("Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(grepl('Blank', Sample))
View(data)
data <- readr::read_csv("Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
View(data)
data <- readr::read_csv("Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
data <- data %>% dplyr::filter(!grepl('NIST', Sample))
View(data)
runApp()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
data <- readr::read_csv("Wave 1 Internal Standard Normalized Data.csv")
data <- readr::read_csv("Wave 2 Internal Standard Normalized Data.csv")
data <- readr::read_csv("Wave 3 Internal Standard Normalized Data.csv")
data <- readr::read_csv("Wave 1 Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
data <- data %>% dplyr::filter(!grepl('BLANK', Sample))
data <- data %>% dplyr::filter(!grepl('NIST', Sample))
library(mag)
library(magrittr)
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
data <- data %>% dplyr::filter(!grepl('BLANK', Sample))
data <- data %>% dplyr::filter(!grepl('NIST', Sample))
peaks   <- as.matrix(data[, -1])
View(peaks)
View(data)
na_features <- which(colMeans(is.na(peaks)) > percent)
percent = 0.2
na_features <- which(colMeans(is.na(peaks)) > percent)
na_features
colMeans(is.na(peaks))
is.na(peaks)
na_features <- which(colMeans(is.na(peaks)) > percent)
if (length(na_features)) {
# remove features if NA > threshold rate
peaks <- peaks[ ,-na_features]
message(paste0(
length(na_features),
" features removed by percent of missing values > ",
as.character(percent)
))
} else {
message('No features removed by missing values')
}
for (i in 1:ncol(peaks)) {
v <- peaks[, i]
if (any(is.na(v))) {
v[which(is.na(v))] <- min(v[which(!is.na(v))][-1]) / 2
peaks[, i] <- v
}
}
imputated_data <- dplyr::bind_cols(data[, 1], peaks)
imputated_data
View(imputated_data)
data <- readr::read_csv("Wave 2 Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
data <- data %>% dplyr::filter(!grepl('BLANK', Sample))
data <- data %>% dplyr::filter(!grepl('NIST', Sample))
peaks   <- as.matrix(data[, -1])
na_features <- which(colMeans(is.na(peaks)) > percent)
if (length(na_features)) {
# remove features if NA > threshold rate
peaks <- peaks[ ,-na_features]
message(paste0(
length(na_features),
" features removed by percent of missing values > ",
as.character(percent)
))
} else {
message('No features removed by missing values')
}
na_features
for (i in 1:ncol(peaks)) {
v <- peaks[, i]
if (any(is.na(v))) {
v[which(is.na(v))] <- min(v[which(!is.na(v))][-1]) / 2
peaks[, i] <- v
}
}
imputated_data <- dplyr::bind_cols(data[, 1], peaks)
data <- readr::read_csv("Wave 1 Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
data <- data %>% dplyr::filter(!grepl('BLANK', Sample))
data <- data %>% dplyr::filter(!grepl('NIST', Sample))
peaks   <- as.matrix(data[, -1])
na_features <- which(colMeans(is.na(peaks)) > percent)
if (length(na_features)) {
# remove features if NA > threshold rate
peaks <- peaks[ ,-na_features]
message(paste0(
length(na_features),
" features removed by percent of missing values > ",
as.character(percent)
))
} else {
message('No features removed by missing values')
}
for (i in 1:ncol(peaks)) {
v <- peaks[, i]
if (any(is.na(v))) {
v[which(is.na(v))] <- min(v[which(!is.na(v))][-1]) / 2
peaks[, i] <- v
}
}
imputated_data <- dplyr::bind_cols(data[, 1], peaks)
data <- readr::read_csv("Wave 3 Internal Standard Normalized Data.csv")
data <- data %>% dplyr::filter(!grepl('Blank', Sample))
data <- data %>% dplyr::filter(!grepl('BLANK', Sample))
data <- data %>% dplyr::filter(!grepl('NIST', Sample))
peaks   <- as.matrix(data[, -1])
na_features <- which(colMeans(is.na(peaks)) > percent)
if (length(na_features)) {
# remove features if NA > threshold rate
peaks <- peaks[ ,-na_features]
message(paste0(
length(na_features),
" features removed by percent of missing values > ",
as.character(percent)
))
} else {
message('No features removed by missing values')
}
for (i in 1:ncol(peaks)) {
v <- peaks[, i]
if (any(is.na(v))) {
v[which(is.na(v))] <- min(v[which(!is.na(v))][-1]) / 2
peaks[, i] <- v
}
}
imputated_data <- dplyr::bind_cols(data[, 1], peaks)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
